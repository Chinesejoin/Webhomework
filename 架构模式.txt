架构模式
    软件体系结构通常被称为架构，值可以预制和可重构的软件框架结构。软件架构模式是高度抽象的、适用于许多类似系统的、预先定义好的一种特殊的软件架构。
    架构模式，也叫架构风格，一个架构模式描述软件系统里的基本结构组织或纲要。架构模式提供一些定义好的子系统，指定它们的责任，并给出把它们组织在一起的法则和指南。一个架构模式常常可以分解成很多个设计模式的联合使用，mvc模式就属于架构模式。
MVC：是模块-视图-控制器的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。
　　　模型：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。在MVC的三个部件中，模型拥有最多的处理任务。例如它可以用像EJBs和ColdFusionComponents这样的构件对象来处理数据库，被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。
　　　视图：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是有HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷。
　　　控制器：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。控制器接受用户的输入并调用模型和视图去完成用户的需求，所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理，它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。
MVP：全称Model-View-Presenter，model提供数据，view负责显示，controller/presenter负责逻辑的处理。MVP与MVC有着一个重大的区别：在MVP中view并不直接使用model，它们之间的通信是通过presenter（MVC中的controller）来进行的，所有的交互都发生在Prensenter内部，而在MVC中view会直接从model中读取数据而不是通过controller
  MVP是从经典的模式MVC演变而来的，它们的基本思想有想通的地方，同时解决了MVC的问题，在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用。不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试，而不需要使用自动化的测试工具。我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object来测试Presenter的逻辑。在MVP里，应用程序的逻辑主要在Presenter来实现，其中View是很薄的一层，因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了，在后面，根据需要再随便更改View，而对Presenter没有任何的影响了，如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter，由这个Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，由不失去UI的灵活性。在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model，这就是与MVC很大的不同之处。

　　　
　　　